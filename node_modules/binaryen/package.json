{
  "_args": [
    [
      "binaryen@90.0.0-nightly.20200214",
      "/home/aditya/Projects/Eth2/simplEE/node_modules/assemblyscript"
    ]
  ],
  "_from": "binaryen@90.0.0-nightly.20200214",
  "_hasShrinkwrap": false,
  "_id": "binaryen@90.0.0-nightly.20200214",
  "_inCache": true,
  "_installable": true,
  "_location": "/binaryen",
  "_nodeVersion": "12.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/binaryen_90.0.0-nightly.20200214_1581639211008_0.9791783944885826"
  },
  "_npmUser": {
    "email": "dcode+assemblyscript@dcode.io",
    "name": "assemblyscript"
  },
  "_npmVersion": "6.13.7",
  "_phantomChildren": {},
  "_requested": {
    "name": "binaryen",
    "raw": "binaryen@90.0.0-nightly.20200214",
    "rawSpec": "90.0.0-nightly.20200214",
    "scope": null,
    "spec": "90.0.0-nightly.20200214",
    "type": "version"
  },
  "_requiredBy": [
    "/assemblyscript"
  ],
  "_resolved": "https://registry.npmjs.org/binaryen/-/binaryen-90.0.0-nightly.20200214.tgz",
  "_shasum": "c2f46314dda59ef359c5fa24c0b6180b0ba2f00b",
  "_shrinkwrap": null,
  "_spec": "binaryen@90.0.0-nightly.20200214",
  "_where": "/home/aditya/Projects/Eth2/simplEE/node_modules/assemblyscript",
  "bin": {
    "wasm-opt": "bin/wasm-opt"
  },
  "bugs": {
    "url": "https://github.com/AssemblyScript/binaryen.js/issues"
  },
  "dependencies": {},
  "description": "JavaScript version of Binaryen, a compiler infrastructure and toolchain library for WebAssembly.",
  "devDependencies": {
    "dateformat": "^3.0.3",
    "doctoc": "^1.4.0",
    "semver": "^6.3.0",
    "simple-git": "^1.128.0",
    "typescript": "^3.7.3"
  },
  "directories": {},
  "dist": {
    "fileCount": 9,
    "integrity": "sha512-ZHajaPd2aP6kDrM9q77afnA402Ufsuw9yLUxtAfgmIglP1JMB2XSRmaXc5pgCELaX53PWJIdcH07LL8uNfTBRw==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeReYrCRA9TVsSAnZWagAA8RUP+wf3cZqkhbb9qsvbwQkw\n/pBoT77cqCRea8uMD8aM0b2F9BXznQ4rJodbH8Q/tOgze6i0P+3lzM1R15E1\nuuPE9TbQ44MnnVH9XcN/r9KcBY3peDkYGKjwc+EreQsrE0gu4xDG5MFsE645\nhDiIwkJ7K7NvqXoH1XKrn/cF89G8xHmRTM6PzUPAb7UWGtBHYAzaLem5yUXH\n7xuhlF5VxnhB22oDOVUWDL5JPtjIdrmXYrhmwDoWNgM6Hx4KHLE4kAMEPMPX\njS0irOdZN+qQTgJqGaKxc4qwgYf1nMEX36WmUv6LkBGJp7aPWpABG3rxJeLz\nwIAwgUzEReMpbmdJMh1Iu0Z7AsATXkCFxWgP9mEFJO6JMIwClU+LzPLkREZ1\nKywCt+upwYwX9cLBT1JZH3bzIeG8kGmQHk26a2scf3c1c1vRl272nLr+RYWv\nC2DSMpT5xu78iGYjdjYWgfRadTDU/JY8OZ9+g/pCdo6uKZ+vusYRkHcSc+jh\nSbxBL6a+/vGrm1Klqo8GZBRQ9ozTJV6+WuNQToWLvcTyPcDvk2BdKAxAlg+1\nTd6Hh5pjVfMQ+b0sAYFyP2uQ/EvhpoNFALiYGjujsnIEuNKgIQOcetaloMXA\nv1BJuj6n4muiJrW/XZQVoJBL5C0Pjy35Kmlg7iYnZ6uIXZbyA4tFJTRlt/XM\nCL+r\r\n=SDpE\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "c2f46314dda59ef359c5fa24c0b6180b0ba2f00b",
    "tarball": "https://registry.npmjs.org/binaryen/-/binaryen-90.0.0-nightly.20200214.tgz",
    "unpackedSize": 10006151
  },
  "gitHead": "b9b12dffc158af0b426943cf16f057dd725a47cb",
  "homepage": "https://github.com/AssemblyScript/binaryen.js#readme",
  "keywords": [
    "wasm",
    "webassembly"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "assemblyscript",
      "email": "dcode+assemblyscript@dcode.io"
    },
    {
      "name": "dcode",
      "email": "dcode+npm@dcode.io"
    }
  ],
  "name": "binaryen",
  "optionalDependencies": {},
  "readme": "binaryen.js\n===========\n\n**binaryen.js** is a port of [Binaryen](https://github.com/WebAssembly/binaryen) to the Web, allowing you to generate [WebAssembly](https://webassembly.org) using a JavaScript API.\n\n[![Actions Status](https://github.com/AssemblyScript/binaryen.js/workflows/Build/badge.svg)](https://github.com/AssemblyScript/binaryen.js/actions) [![npm](https://img.shields.io/npm/v/binaryen.svg)](https://www.npmjs.com/package/binaryen) [![npm (tag)](https://img.shields.io/npm/v/binaryen/nightly.svg)](https://www.npmjs.com/package/binaryen)\n\nUsage\n-----\n\n```\n$> npm install binaryen\n```\n\n```js\nvar binaryen = require(\"binaryen\");\n\n// Create a module with a single function\nvar myModule = new binaryen.Module();\n\nmyModule.addFunction(\"add\", binaryen.createType([ binaryen.i32, binaryen.i32 ]), binaryen.i32, [ binaryen.i32 ],\n  myModule.block(null, [\n    myModule.setLocal(2,\n      myModule.i32.add(\n        myModule.getLocal(0, binaryen.i32),\n        myModule.getLocal(1, binaryen.i32)\n      )\n    ),\n    myModule.return(\n      myModule.getLocal(2, binaryen.i32)\n    )\n  ])\n);\nmyModule.addFunctionExport(\"add\", \"add\");\n\n// Optimize the module using default passes and levels\nmyModule.optimize();\n\n// Validate the module\nif (!myModule.validate())\n  throw new Error(\"validation error\");\n\n// Generate text format and binary\nvar textData = myModule.emitText();\nvar wasmData = myModule.emitBinary();\n\n// Example usage with the WebAssembly API\nvar compiled = new WebAssembly.Module(wasmData);\nvar instance = new WebAssembly.Instance(compiled, {});\nconsole.log(instance.exports.add(41, 1));\n```\n\nThe buildbot also publishes nightly versions once a day if there have been changes. The latest nightly can be installed through\n\n```\n$> npm install binaryen@nightly\n```\n\nor you can use one of the [previous versions](https://github.com/AssemblyScript/binaryen.js/tags) instead if necessary.\n\n### Usage with a CDN\n\n  * From GitHub via [jsDelivr](https://www.jsdelivr.com):<br />\n    `https://cdn.jsdelivr.net/gh/AssemblyScript/binaryen.js@VERSION/index.js`\n  * From npm via [jsDelivr](https://www.jsdelivr.com):<br />\n    `https://cdn.jsdelivr.net/npm/binaryen@VERSION/index.js`\n  * From npm via [unpkg](https://unpkg.com):<br />\n    `https://unpkg.com/binaryen@VERSION/index.js`\n\n  Replace `VERSION` with a [specific version](https://github.com/AssemblyScript/binaryen.js/releases) or omit it (not recommended in production) to use master/latest.\n\nAPI\n---\n\n**Please note** that the Binaryen API is evolving fast and that definitions and documentation provided by the package tend to get out of sync despite our best efforts. It's a bot after all. If you rely on binaryen.js and spot an issue, please consider sending a PR our way by updating [index.d.ts](./index.d.ts) and [README.md](./README.md) to reflect the [current API](https://github.com/WebAssembly/binaryen/blob/master/src/js/binaryen.js-post.js).\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n### Contents\n\n- [Types](#types)\n- [Module construction](#module-construction)\n- [Module manipulation](#module-manipulation)\n- [Module validation](#module-validation)\n- [Module optimization](#module-optimization)\n- [Module creation](#module-creation)\n- [Expression construction](#expression-construction)\n  - [Control flow](#control-flow)\n  - [Variable accesses](#variable-accesses)\n  - [Integer operations](#integer-operations)\n  - [Floating point operations](#floating-point-operations)\n  - [Datatype conversions](#datatype-conversions)\n  - [Function calls](#function-calls)\n  - [Linear memory accesses](#linear-memory-accesses)\n  - [Host operations](#host-operations)\n  - [Vector operations ðŸ¦„](#vector-operations-)\n  - [Atomic memory accesses ðŸ¦„](#atomic-memory-accesses-)\n  - [Atomic read-modify-write operations ðŸ¦„](#atomic-read-modify-write-operations-)\n  - [Atomic wait and notify operations ðŸ¦„](#atomic-wait-and-notify-operations-)\n  - [Sign extension operations ðŸ¦„](#sign-extension-operations-)\n  - [Multi-value operations ðŸ¦„](#multi-value-operations-)\n  - [Exception handling operations ðŸ¦„](#exception-handling-operations-)\n  - [Reference types operations ðŸ¦„](#reference-types-operations-)\n- [Expression manipulation](#expression-manipulation)\n- [Relooper](#relooper)\n- [Source maps](#source-maps)\n- [Debugging](#debugging)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n[Future features](http://webassembly.org/docs/future-features/) ðŸ¦„ might not be supported by all runtimes.\n\n### Types\n\n * **none**: `Type`<br />\n   The none type, e.g., `void`.\n\n * **i32**: `Type`<br />\n   32-bit integer type.\n\n * **i64**: `Type`<br />\n   64-bit integer type.\n\n * **f32**: `Type`<br />\n   32-bit float type.\n\n * **f64**: `Type`<br />\n   64-bit float (double) type.\n\n * **v128**: `Type`<br />\n   128-bit vector type. ðŸ¦„\n\n * **funcref**: `Type`<br />\n   A function reference. ðŸ¦„\n\n * **anyref**: `Type`<br />\n   Any host reference. ðŸ¦„\n\n * **nullref**: `Type`<br />\n   A null reference. ðŸ¦„\n\n * **exnref**: `Type`<br />\n   An exception reference. ðŸ¦„\n\n * **unreachable**: `Type`<br />\n   Special type indicating unreachable code when obtaining information about an expression.\n\n * **auto**: `Type`<br />\n   Special type used in **Module#block** exclusively. Lets the API figure out a block's result type automatically.\n\n * **createType**(types: `Type[]`): `Type`<br />\n   Creates a multi-value type from an array of types.\n\n * **expandType**(type: `Type`): `Type[]`<br />\n   Expands a multi-value type to an array of types.\n\n### Module construction\n\n * new **Module**()<br />\n   Constructs a new module.\n\n * **parseText**(text: `string`): `Module`<br />\n   Creates a module from Binaryen's s-expression text format (not official stack-style text format).\n\n * **readBinary**(data: `Uint8Array`): `Module`<br />\n   Creates a module from binary data.\n\n### Module manipulation\n\n* Module#**addFunction**(name: `string`, params: `Type`, results: `Type`, vars: `Type[]`, body: `ExpressionRef`): `FunctionRef`<br />\n  Adds a function. `vars` indicate additional locals, in the given order.\n\n* Module#**getFunction**(name: `string`): `FunctionRef`<br />\n  Gets a function, by name,\n\n* Module#**removeFunction**(name: `string`): `void`<br />\n  Removes a function, by name.\n\n* Module#**getNumFunctions**(): `number`<br />\n  Gets the number of functions within the module.\n\n* Module#**getFunctionByIndex**(index: `number`): `FunctionRef`<br />\n  Gets the function at the specified index.\n\n* Module#**addFunctionImport**(internalName: `string`, externalModuleName: `string`, externalBaseName: `string`, params: `Type`, results: `Type`): `void`<br />\n  Adds a function import.\n\n* Module#**addTableImport**(internalName: `string`, externalModuleName: `string`, externalBaseName: `string`): `void`<br />\n  Adds a table import. There's just one table for now, using name `\"0\"`.\n\n* Module#**addMemoryImport**(internalName: `string`, externalModuleName: `string`, externalBaseName: `string`): `void`<br />\n  Adds a memory import. There's just one memory for now, using name `\"0\"`.\n\n* Module#**addGlobalImport**(internalName: `string`, externalModuleName: `string`, externalBaseName: `string`, globalType: `Type`): `void`<br />\n  Adds a global variable import. Imported globals must be immutable.\n\n* Module#**addFunctionExport**(internalName: `string`, externalName: `string`): `ExportRef`<br />\n  Adds a function export.\n\n* Module#**addTableExport**(internalName: `string`, externalName: `string`): `ExportRef`<br />\n  Adds a table export. There's just one table for now, using name `\"0\"`.\n\n* Module#**addMemoryExport**(internalName: `string`, externalName: `string`): `ExportRef`<br />\n  Adds a memory export. There's just one memory for now, using name `\"0\"`.\n\n* Module#**addGlobalExport**(internalName: `string`, externalName: `string`): `ExportRef`<br />\n  Adds a global variable export. Exported globals must be immutable.\n\n* Module#**getNumExports**(): `number`<br />\n  Gets the number of exports witin the module.\n\n* Module#**getExportByIndex**(index: `number`): `ExportRef`<br />\n  Gets the export at the specified index.\n\n* Module#**removeExport**(externalName: `string`): `void`<br />\n  Removes an export, by external name.\n\n* Module#**addGlobal**(name: `string`, type: `Type`, mutable: `number`, value: `ExpressionRef`): `GlobalRef`<br />\n  Adds a global instance variable.\n\n* Module#**getGlobal**(name: `string`): `GlobalRef`<br />\n  Gets a global, by name,\n\n* Module#**removeGlobal**(name: `string`): `void`<br />\n  Removes a global, by name.\n\n* Module#**setFunctionTable**(initial: `number`, maximum: `number`, funcs: `string[]`, offset?: `ExpressionRef`): `void`<br />\n  Sets the contents of the function table. There's just one table for now, using name `\"0\"`.\n\n* Module#**setMemory**(initial: `number`, maximum: `number`, exportName: `string | null`, segments: `MemorySegment[]`, flags?: `number[]`, shared?: `boolean`): `void`<br />\n  Sets the memory. There's just one memory for now, using name `\"0\"`. Providing `exportName` also creates a memory export.\n\n  * MemorySegment#**offset**: `ExpressionRef`\n  * MemorySegment#**data**: `Uint8Array`\n  * MemorySegment#**passive**: `boolean`\n\n* Module#**getNumMemorySegments**(): `number`<br />\n  Gets the number of memory segments within the module.\n\n* Module#**getMemorySegmentInfoByIndex**(index: `number`): `MemorySegmentInfo`<br />\n  Gets information about the memory segment at the specified index.\n\n  * MemorySegmentInfo#**offset**: `number`\n  * MemorySegmentInfo#**data**: `Uint8Array`\n  * MemorySegmentInfo#**passive**: `boolean`\n\n* Module#**setStart**(start: `FunctionRef`): `void`<br />\n  Sets the start function.\n\n* Module#**getFeatures**(): `FeatureFlags`<br />\n  Gets the WebAssembly features enabled for this module.\n\n  Possible `FeatureFlags` values are:\n\n  * Features.**MVP**: `FeatureFlags`\n  * Features.**Atomics**: `FeatureFlags`\n  * Features.**BulkMemory**: `FeatureFlags`\n  * Features.**MutableGlobals**: `FeatureFlags`\n  * Features.**NontrappingFPToInt**: `FeatureFlags`\n  * Features.**SignExt**: `FeatureFlags`\n  * Features.**SIMD128**: `FeatureFlags`\n  * Features.**ExceptionHandling**: `FeatureFlags`\n  * Features.**TailCall**: `FeatureFlags`\n  * Features.**ReferenceTypes**: `FeatureFlags`\n  * Features.**All**: `FeatureFlags`\n\n* Module#**setFeatures**(features: `FeatureFlags`): `void`<br />\n  Sets the WebAssembly features enabled for this module.\n\n* Module#**addCustomSection**(name: `string`, contents: `Uint8Array`): `void`<br />\n  Adds a custom section to the binary.\n\n* Module#**autoDrop**(): `void`<br />\n  Enables automatic insertion of `drop` operations where needed. Lets you not worry about dropping when creating your code.\n\n* **getFunctionInfo**(ftype: `FunctionRef`: `FunctionInfo`<br />\n  Obtains information about a function.\n\n  * FunctionInfo#**name**: `string`\n  * FunctionInfo#**module**: `string | null` (if imported)\n  * FunctionInfo#**base**: `string | null` (if imported)\n  * FunctionInfo#**params**: `Type`\n  * FunctionInfo#**results**: `Type`\n  * FunctionInfo#**vars**: `Type`\n  * FunctionInfo#**body**: `ExpressionRef`\n\n* **getGlobalInfo**(global: `GlobalRef`): `GlobalInfo`<br />\n  Obtains information about a global.\n\n  * GlobalInfo#**name**: `string`\n  * GlobalInfo#**module**: `string | null` (if imported)\n  * GlobalInfo#**base**: `string | null` (if imported)\n  * GlobalInfo#**type**: `Type`\n  * GlobalInfo#**mutable**: `boolean`\n  * GlobalInfo#**init**: `ExpressionRef`\n\n* **getExportInfo**(export_: `ExportRef`): `ExportInfo`<br />\n  Obtains information about an export.\n\n  * ExportInfo#**kind**: `ExternalKind`\n  * ExportInfo#**name**: `string`\n  * ExportInfo#**value**: `string`\n\n  Possible `ExternalKind` values are:\n\n  * **ExternalFunction**: `ExternalKind`\n  * **ExternalTable**: `ExternalKind`\n  * **ExternalMemory**: `ExternalKind`\n  * **ExternalGlobal**: `ExternalKind`\n  * **ExternalEvent**: `ExternalKind`\n\n* **getEventInfo**(event: `EventRef`): `EventInfo`<br />\n  Obtains information about an event.\n\n  * EventInfo#**name**: `string`\n  * EventInfo#**module**: `string | null` (if imported)\n  * EventInfo#**base**: `string | null` (if imported)\n  * EventInfo#**attribute**: `number`\n  * EventInfo#**params**: `Type`\n  * EventInfo#**results**: `Type`\n\n* **getSideEffects**(expr: `ExpressionRef`, features: `FeatureFlags`): `SideEffects`<br />\n  Gets the side effects of the specified expression.\n\n  * SideEffects.**None**: `SideEffects`\n  * SideEffects.**Branches**: `SideEffects`\n  * SideEffects.**Calls**: `SideEffects`\n  * SideEffects.**ReadsLocal**: `SideEffects`\n  * SideEffects.**WritesLocal**: `SideEffects`\n  * SideEffects.**ReadsGlobal**: `SideEffects`\n  * SideEffects.**WritesGlobal**: `SideEffects`\n  * SideEffects.**ReadsMemory**: `SideEffects`\n  * SideEffects.**WritesMemory**: `SideEffects`\n  * SideEffects.**ImplicitTrap**: `SideEffects`\n  * SideEffects.**IsAtomic**: `SideEffects`\n  * SideEffects.**Throws**: `SideEffects`\n  * SideEffects.**Any**: `SideEffects`\n\n### Module validation\n\n* Module#**validate**(): `boolean`<br />\n  Validates the module. Returns `true` if valid, otherwise prints validation errors and returns `false`.\n\n### Module optimization\n\n* Module#**optimize**(): `void`<br />\n  Optimizes the module using the default optimization passes.\n\n* Module#**optimizeFunction**(func: `FunctionRef | string`): `void`<br />\n  Optimizes a single function using the default optimization passes.\n\n* Module#**runPasses**(passes: `string[]`): `void`<br />\n  Runs the specified passes on the module.\n\n* Module#**runPassesOnFunction**(func: `FunctionRef | string`, passes: `string[]`): `void`<br />\n  Runs the specified passes on a single function.\n\n* **getOptimizeLevel**(): `number`<br />\n  Gets the currently set optimize level. `0`, `1`, `2` correspond to `-O0`, `-O1`, `-O2` (default), etc.\n\n* **setOptimizeLevel**(level: `number`): `void`<br />\n  Sets the optimization level to use. `0`, `1`, `2` correspond to `-O0`, `-O1`, `-O2` (default), etc.\n\n* **getShrinkLevel**(): `number`<br />\n  Gets the currently set shrink level. `0`, `1`, `2` correspond to `-O0`, `-Os` (default), `-Oz`.\n\n* **setShrinkLevel**(level: `number`): `void`<br />\n  Sets the shrink level to use. `0`, `1`, `2` correspond to `-O0`, `-Os` (default), `-Oz`.\n\n* **getDebugInfo**(): `boolean`<br />\n  Gets whether generating debug information is currently enabled or not.\n\n* **setDebugInfo**(on: `boolean`): `void`<br />\n  Enables or disables debug information in emitted binaries.\n\n* **getLowMemoryUnused**(): `boolean`<br />\n  Gets whether the low 1K of memory can be considered unused when optimizing.\n\n* **setLowMemoryUnused**(on: `boolean`): `void`<br />\n  Enables or disables whether the low 1K of memory can be considered unused when optimizing.\n\n* **getPassArgument**(key: `string`): `string | null`<br />\n  Gets the value of the specified arbitrary pass argument.\n\n* **setPassArgument**(key: `string`, value: `string | null`): `void`<br />\n  Sets the value of the specified arbitrary pass argument. Removes the respective argument if `value` is `null`.\n\n* **clearPassArguments**(): `void`<br />\n  Clears all arbitrary pass arguments.\n\n### Module creation\n\n* Module#**emitBinary**(): `Uint8Array`<br />\n  Returns the module in binary format.\n\n* Module#**emitBinary**(sourceMapUrl: `string | null`): `BinaryWithSourceMap`<br />\n  Returns the module in binary format with its source map. If `sourceMapUrl` is `null`, source map generation is skipped.\n\n  * BinaryWithSourceMap#**binary**: `Uint8Array`\n  * BinaryWithSourceMap#**sourceMap**: `string | null`\n\n* Module#**emitText**(): `string`<br />\n  Returns the module in Binaryen's s-expression text format (not official stack-style text format).\n\n* Module#**emitAsmjs**(): `string`<br />\n  Returns the [asm.js](http://asmjs.org/) representation of the module.\n\n* Module#**dispose**(): `void`<br />\n  Releases the resources held by the module once it isn't needed anymore.\n\n### Expression construction\n\n#### [Control flow](http://webassembly.org/docs/semantics/#control-constructs-and-instructions)\n\n* Module#**block**(label: `string | null`, children: `ExpressionRef[]`, resultType?: `Type`): `ExpressionRef`<br />\n  Creates a block. `resultType` defaults to `none`.\n\n* Module#**if**(condition: `ExpressionRef`, ifTrue: `ExpressionRef`, ifFalse?: `ExpressionRef`): `ExpressionRef`<br />\n  Creates an if or if/else combination.\n\n* Module#**loop**(label: `string | null`, body: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a loop.\n\n* Module#**break**(label: `string`, condition?: `ExpressionRef`, value?: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a break (br) to a label.\n\n* Module#**switch**(labels: `string[]`, defaultLabel: `string`, condition: `ExpressionRef`, value?: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a switch (br_table).\n\n* Module#**nop**(): `ExpressionRef`<br />\n  Creates a no-operation (nop) instruction.\n\n* Module#**return**(value?: `ExpressionRef`): `ExpressionRef`\n  Creates a return.\n\n* Module#**unreachable**(): `ExpressionRef`<br />\n  Creates an [unreachable](http://webassembly.org/docs/semantics/#unreachable) instruction that will always trap.\n\n* Module#**drop**(value: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a [drop](http://webassembly.org/docs/semantics/#type-parametric-operators) of a value.\n\n* Module#**select**(condition: `ExpressionRef`, ifTrue: `ExpressionRef`, ifFalse: `ExpressionRef`, type?: `Type`): `ExpressionRef`<br />\n  Creates a [select](http://webassembly.org/docs/semantics/#type-parametric-operators) of one of two values.\n\n#### [Variable accesses](http://webassembly.org/docs/semantics/#local-variables)\n\n* Module#**local.get**(index: `number`, type: `Type`): `ExpressionRef`<br />\n  Creates a local.get for the local at the specified index. Note that we must specify the type here as we may not have created the local being accessed yet.\n\n* Module#**local.set**(index: `number`, value: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a local.set for the local at the specified index.\n\n* Module#**local.tee**(index: `number`, value: `ExpressionRef`, type: `Type`): `ExpressionRef`<br />\n  Creates a local.tee for the local at the specified index. A tee differs from a set in that the value remains on the stack. Note that we must specify the type here as we may not have created the local being accessed yet.\n\n* Module#**global.get**(name: `string`, type: `Type`): `ExpressionRef`<br />\n  Creates a global.get for the global with the specified name. Note that we must specify the type here as we may not have created the global being accessed yet.\n\n* Module#**global.set**(name: `string`, value: `ExpressionRef`): `ExpressionRef`<br />\n  Creates a global.set for the global with the specified name.\n\n#### [Integer operations](http://webassembly.org/docs/semantics/#32-bit-integer-operators)\n\n* Module#i32.**const**(value: `number`): `ExpressionRef`\n* Module#i32.**clz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**ctz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**popcnt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**eqz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**div_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**div_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**rem_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**rem_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**and**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**or**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**xor**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**shl**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**shr_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**shr_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**rotl**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**rotr**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**lt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**le_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**le_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**gt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**gt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**ge_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**ge_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64.**const**(value: `number`): `ExpressionRef`\n* Module#i64.**clz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**ctz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**popcnt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**eqz**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**div_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**div_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**rem_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**rem_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**and**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**or**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**xor**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**shl**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**shr_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**shr_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**rotl**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**rotr**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**lt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**le_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**le_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**gt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**gt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**ge_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**ge_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n\n#### [Floating point operations](http://webassembly.org/docs/semantics/#floating-point-operators)\n\n* Module#f32.**const**(value: `number`): `ExpressionRef`\n* Module#f32.**const_bits**(value: `number`): `ExpressionRef`\n* Module#f32.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**abs**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**ceil**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**floor**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**trunc**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**nearest**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**sqrt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**div**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**copysign**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**min**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**max**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**lt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**le**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**gt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**ge**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f64.**const**(value: `number`): `ExpressionRef`\n* Module#f64.**const_bits**(value: `number`): `ExpressionRef`\n* Module#f64.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**abs**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**ceil**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**floor**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**trunc**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**nearest**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**sqrt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**div**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**copysign**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**min**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**max**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**lt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**le**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**gt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**ge**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n\n#### [Datatype conversions](http://webassembly.org/docs/semantics/#datatype-conversions-truncations-reinterpretations-promotions-and-demotions)\n\n* Module#i32.**trunc_s.f32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**trunc_s.f64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**trunc_u.f32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**trunc_u.f64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**reinterpret**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**wrap**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64.**trunc_s.f32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**trunc_s.f64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**trunc_u.f32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**trunc_u.f64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**reinterpret**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**extend_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**extend_u**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f32.**reinterpret**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**convert_s.i32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**convert_s.i64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**convert_u.i32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**convert_u.i64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**demote**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f64.**reinterpret**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**convert_s.i32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**convert_s.i64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**convert_u.i32**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**convert_u.i64**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**promote**(value: `ExpressionRef`): `ExpressionRef`\n\n#### [Function calls](http://webassembly.org/docs/semantics/#calls)\n\n* Module#**call**(name: `string`, operands: `ExpressionRef[]`, params: `Type`, results: `Type`): `ExpressionRef`<br />\n  Creates a call to a function. Note that we must specify the parameter and result type here.\n\n* Module#**return_call**(name: `string`, operands: `ExpressionRef[]`, params: `Type`, results: `Type`): `ExpressionRef`<br />\n  Like **call**, but creates a tail-call. ðŸ¦„\n\n* Module#**call_indirect**(target: `ExpressionRef`, operands: `ExpressionRef[]`, params: `Type`, results: `Type`): `ExpressionRef`<br />\n  Similar to **call**, but calls indirectly, i.e., via a function pointer, so an expression replaces the name as the called value.\n\n* Module#**return_call_indirect**(target: `ExpressionRef`, operands: `ExpressionRef[]`, params: `Type`, results: `Type`): `ExpressionRef`<br />\n  Like **call_indirect**, but creates a tail-call. ðŸ¦„\n\n#### [Linear memory accesses](http://webassembly.org/docs/semantics/#linear-memory-accesses)\n\n* Module#i32.**load**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**load8_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**load8_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**load16_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**load16_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**store**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**store8**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`<br />\n* Module#i32.**store16**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`<br />\n>\n* Module#i64.**load**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load8_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load8_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load16_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load16_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load32_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**load32_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**store**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**store8**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**store16**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**store32**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f32.**load**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#f32.**store**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f64.**load**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#f64.**store**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n\n#### [Host operations](http://webassembly.org/docs/semantics/#resizing)\n\n* Module#**memory.size**(): `ExpressionRef`\n* Module#**memory.grow**(value: `number`): `ExpressionRef`\n\n#### [Vector operations](https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md) ðŸ¦„\n\n* Module#v128.**const**(bytes: `Uint8Array`): `ExpressionRef`\n* Module#v128.**load**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**store**(offset: `number`, align: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**not**(value: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**and**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**or**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**xor**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**andnot**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#v128.**bitselect**(left: `ExpressionRef`, right: `ExpressionRef`, cond: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i8x16.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**extract_lane_s**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i8x16.**extract_lane_u**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i8x16.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**lt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**gt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**gt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**le_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**ge_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**ge_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**any_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**all_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**shl**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**shr_s**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**shr_u**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**add_saturate_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**add_saturate_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**sub_saturate_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**sub_saturate_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**min_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**min_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**max_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**max_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**avgr_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**narrow_i16x8_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i8x16.**narrow_i16x8_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i16x8.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**extract_lane_s**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i16x8.**extract_lane_u**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i16x8.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**lt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**gt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**gt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**le_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**ge_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**ge_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**any_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**all_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**shl**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**shr_s**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**shr_u**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**add_saturate_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**add_saturate_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**sub_saturate_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**sub_saturate_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**min_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**min_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**max_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**max_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**avgr_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**narrow_i32x4_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**narrow_i32x4_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**widen_low_i8x16_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**widen_high_i8x16_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**widen_low_i8x16_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**widen_high_i8x16_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**load8x8_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i16x8.**load8x8_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i32x4.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**extract_lane_s**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i32x4.**extract_lane_u**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i32x4.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**lt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**gt_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**gt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**le_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**lt_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**ge_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**ge_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**any_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**all_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**shl**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**shr_s**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**shr_u**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**min_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**min_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**max_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**max_u**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**dot_i16x8_s**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**trunc_sat_f32x4_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**trunc_sat_f32x4_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**widen_low_i16x8_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**widen_high_i16x8_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**widen_low_i16x8_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**widen_high_i16x8_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**load16x4_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i32x4.**load16x4_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64x2.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**extract_lane_s**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i64x2.**extract_lane_u**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#i64x2.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**any_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**all_true**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**shl**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**shr_s**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**shr_u**(vec: `ExpressionRef`, shift: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**trunc_sat_f64x2_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**trunc_sat_f64x2_u**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**load32x2_s**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64x2.**load32x2_u**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f32x4.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**extract_lane**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#f32x4.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**lt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**gt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**le**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**ge**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**abs**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**sqrt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**qfma**(a: `ExpressionRef`, b: `ExpressionRef`, c: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**qfms**(a: `ExpressionRef`, b: `ExpressionRef`, c: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**div**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**min**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**max**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**convert_i32x4_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f32x4.**convert_i32x4_u**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#f64x2.**splat**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**extract_lane**(vec: `ExpressionRef`, index: `number`): `ExpressionRef`\n* Module#f64x2.**replace_lane**(vec: `ExpressionRef`, index: `number`, value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**eq**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**ne**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**lt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**gt**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**le**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**ge**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**abs**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**neg**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**sqrt**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**qfma**(a: `ExpressionRef`, b: `ExpressionRef`, c: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**qfms**(a: `ExpressionRef`, b: `ExpressionRef`, c: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**add**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**sub**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**mul**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**div**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**min**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**max**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**convert_i64x2_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#f64x2.**convert_i64x2_u**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#v8x16.**shuffle**(left: `ExpressionRef`, right: `ExpressionRef`, mask: `Uint8Array`): `ExpressionRef`\n* Module#v8x16.**swizzle**(left: `ExpressionRef`, right: `ExpressionRef`): `ExpressionRef`\n* Module#v8x16.**load_splat**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#v16x8.**load_splat**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#v32x4.**load_splat**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n>\n* Module#v64x2.**load_splat**(offset: `number`, align: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n\n#### [Atomic memory accesses](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses) ðŸ¦„\n\n* Module#i32.**atomic.load**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.load8_u**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.load16_u**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.store**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.store8**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.store16**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64.**atomic.load**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.load8_u**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.load16_u**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.load32_u**(offset: `number`, ptr: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.store**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.store8**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.store16**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.store32**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n\n#### [Atomic read-modify-write operations](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#read-modify-write) ðŸ¦„\n\n* Module#i32.**atomic.rmw.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw8_u.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**atomic.rmw16_u.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64.**atomic.rmw.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw8_u.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw16_u.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.add**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.sub**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.and**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.or**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.xor**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.xchg**(offset: `number`, ptr: `ExpressionRef`, value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.rmw32_u.cmpxchg**(offset: `number`, ptr: `ExpressionRef`, expected: `ExpressionRef`, replacement: `ExpressionRef`): `ExpressionRef`\n\n#### [Atomic wait and notify operations](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#wait-and-notify-operators) ðŸ¦„\n\n* Module#i32.**atomic.wait**(ptr: `ExpressionRef`, expected: `ExpressionRef`, timeout: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**atomic.wait**(ptr: `ExpressionRef`, expected: `ExpressionRef`, timeout: `ExpressionRef`): `ExpressionRef`\n* Module#**atomic.notify**(ptr: `ExpressionRef`, notifyCount: `ExpressionRef`): `ExpressionRef`\n* Module#**atomic.fence**(): `ExpressionRef`\n\n#### [Sign extension operations](https://github.com/WebAssembly/sign-extension-ops/blob/master/proposals/sign-extension-ops/Overview.md) ðŸ¦„\n\n* Module#i32.**extend8_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**extend16_s**(value: `ExpressionRef`): `ExpressionRef`\n>\n* Module#i64.**extend8_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**extend16_s**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i64.**extend32_s**(value: `ExpressionRef`): `ExpressionRef`\n\n#### [Multi-value operations](https://github.com/WebAssembly/multi-value/blob/master/proposals/multi-value/Overview.md) ðŸ¦„\n\nNote that these are pseudo instructions enabling Binaryen to reason about multiple values on the stack.\n\n* Module#**push**(value: `ExpressionRef`): `ExpressionRef`\n* Module#i32.**pop**(): `ExpressionRef`\n* Module#i64.**pop**(): `ExpressionRef`\n* Module#f32.**pop**(): `ExpressionRef`\n* Module#f64.**pop**(): `ExpressionRef`\n* Module#v128.**pop**(): `ExpressionRef`\n* Module#funcref.**pop**(): `ExpressionRef`\n* Module#anyref.**pop**(): `ExpressionRef`\n* Module#nullref.**pop**(): `ExpressionRef`\n* Module#exnref.**pop**(): `ExpressionRef`\n\n#### [Exception handling operations](https://github.com/WebAssembly/exception-handling/blob/master/proposals/Exceptions.md) ðŸ¦„\n\n* Module#**try**(body: `ExpressionRef`, catchBody: `ExpressionRef`): `ExpressionRef`\n* Module#**throw**(event: `string`, operands: `ExpressionRef[]`): `ExpressionRef`\n* Module#**rethrow**(exnref: `ExpressionRef`): `ExpressionRef`\n* Module#**br_on_exn**(label: `string`, event: `string`, exnref: `ExpressionRef`): `ExpressionRef`\n>\n* Module#**addEvent**(name: `string`, attribute: `number`, params: `Type`, results: `Type`): `Event`\n* Module#**getEvent**(name: `string`): `Event`\n* Module#**removeEvent**(name: `stirng`): `void`\n* Module#**addEventImport**(internalName: `string`, externalModuleName: `string`, externalBaseName: `string`, attribute: `number`, params: `Type`, results: `Type`): `void`\n* Module#**addEventExport**(internalName: `string`, externalName: `string`): `ExportRef`\n\n#### [Reference types operations](https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md) ðŸ¦„\n\n* Module#ref.**null**(): `ExpressionRef`\n* Module#ref.**is_null**(value: `ExpressionRef`): `ExpressionRef`\n* Module#ref.**func**(name: `string`): `ExpressionRef`\n\n### Expression manipulation\n\n* **getExpressionId**(expr: `ExpressionRef`): `ExpressionId`<br />\n  Gets the id (kind) of the specified expression. Possible values are:\n\n  * **InvalidId**: `ExpressionId`\n  * **BlockId**: `ExpressionId`\n  * **IfId**: `ExpressionId`\n  * **LoopId**: `ExpressionId`\n  * **BreakId**: `ExpressionId`\n  * **SwitchId**: `ExpressionId`\n  * **CallId**: `ExpressionId`\n  * **CallIndirectId**: `ExpressionId`\n  * **LocalGetId**: `ExpressionId`\n  * **LocalSetId**: `ExpressionId`\n  * **GlobalGetId**: `ExpressionId`\n  * **GlobalSetId**: `ExpressionId`\n  * **LoadId**: `ExpressionId`\n  * **StoreId**: `ExpressionId`\n  * **ConstId**: `ExpressionId`\n  * **UnaryId**: `ExpressionId`\n  * **BinaryId**: `ExpressionId`\n  * **SelectId**: `ExpressionId`\n  * **DropId**: `ExpressionId`\n  * **ReturnId**: `ExpressionId`\n  * **HostId**: `ExpressionId`\n  * **NopId**: `ExpressionId`\n  * **UnreachableId**: `ExpressionId`\n  * **AtomicCmpxchgId**: `ExpressionId`\n  * **AtomicRMWId**: `ExpressionId`\n  * **AtomicWaitId**: `ExpressionId`\n  * **AtomicNotifyId**: `ExpressionId`\n  * **AtomicFenceId**: `ExpressionId`\n  * **SIMDExtractId**: `ExpressionId`\n  * **SIMDReplaceId**: `ExpressionId`\n  * **SIMDShuffleId**: `ExpressionId`\n  * **SIMDTernaryId**: `ExpressionId`\n  * **SIMDShiftId**: `ExpressionId`\n  * **SIMDLoadId**: `ExpressionId`\n  * **MemoryInitId**: `ExpressionId`\n  * **DataDropId**: `ExpressionId`\n  * **MemoryCopyId**: `ExpressionId`\n  * **MemoryFillId**: `ExpressionId`\n  * **RefNullId**: `ExpressionId`\n  * **RefIsNullId**: `ExpressionId`\n  * **RefFuncId**: `ExpressionId`\n  * **TryId**: `ExpressionId`\n  * **ThrowId**: `ExpressionId`\n  * **RethrowId**: `ExpressionId`\n  * **BrOnExnId**: `ExpressionId`\n  * **PushId**: `ExpressionId`\n  * **PopId**: `ExpressionId`\n\n* **getExpressionType**(expr: `ExpressionRef`): `Type`<br />\n  Gets the type of the specified expression.\n\n* **getExpressionInfo**(expr: `ExpressionRef`): `ExpressionInfo`<br />\n  Obtains information about an expression, always including:\n\n  * Info#**id**: `ExpressionId`\n  * Info#**type**: `Type`\n\n  Additional properties depend on the expression's `id` and are usually equivalent to the respective parameters when creating such an expression:\n\n  * BlockInfo#**name**: `string`\n  * BlockInfo#**children**: `ExpressionRef[]`\n  >\n  * IfInfo#**condition**: `ExpressionRef`\n  * IfInfo#**ifTrue**: `ExpressionRef`\n  * IfInfo#**ifFalse**: `ExpressionRef | null`\n  >\n  * LoopInfo#**name**: `string`\n  * LoopInfo#**body**: `ExpressionRef`\n  >\n  * BreakInfo#**name**: `string`\n  * BreakInfo#**condition**: `ExpressionRef | null`\n  * BreakInfo#**value**: `ExpressionRef | null`\n  >\n  * SwitchInfo#**names**: `string[]`\n  * SwitchInfo#**defaultName**: `string | null`\n  * SwitchInfo#**condition**: `ExpressionRef`\n  * SwitchInfo#**value**: `ExpressionRef | null`\n  >\n  * CallInfo#**target**: `string`\n  * CallInfo#**operands**: `ExpressionRef[]`\n  >\n  * CallImportInfo#**target**: `string`\n  * CallImportInfo#**operands**: `ExpressionRef[]`\n  >\n  * CallIndirectInfo#**target**: `ExpressionRef`\n  * CallIndirectInfo#**operands**: `ExpressionRef[]`\n  >\n  * LocalGetInfo#**index**: `number`\n  >\n  * LocalSetInfo#**isTee**: `boolean`\n  * LocalSetInfo#**index**: `number`\n  * LocalSetInfo#**value**: `ExpressionRef`\n  >\n  * GlobalGetInfo#**name**: `string`\n  >\n  * GlobalSetInfo#**name**: `string`\n  * GlobalSetInfo#**value**: `ExpressionRef`\n  >\n  * LoadInfo#**isAtomic**: `boolean`\n  * LoadInfo#**isSigned**: `boolean`\n  * LoadInfo#**offset**: `number`\n  * LoadInfo#**bytes**: `number`\n  * LoadInfo#**align**: `number`\n  * LoadInfo#**ptr**: `ExpressionRef`\n  >\n  * StoreInfo#**isAtomic**: `boolean`\n  * StoreInfo#**offset**: `number`\n  * StoreInfo#**bytes**: `number`\n  * StoreInfo#**align**: `number`\n  * StoreInfo#**ptr**: `ExpressionRef`\n  * StoreInfo#**value**: `ExpressionRef`\n  >\n  * ConstInfo#**value**: `number | { low: number, high: number }`\n  >\n  * UnaryInfo#**op**: `number`\n  * UnaryInfo#**value**: `ExpressionRef`\n  >\n  * BinaryInfo#**op**: `number`\n  * BinaryInfo#**left**: `ExpressionRef`\n  * BinaryInfo#**right**: `ExpressionRef`\n  >\n  * SelectInfo#**ifTrue**: `ExpressionRef`\n  * SelectInfo#**ifFalse**: `ExpressionRef`\n  * SelectInfo#**condition**: `ExpressionRef`\n  >\n  * DropInfo#**value**: `ExpressionRef`\n  >\n  * ReturnInfo#**value**: `ExpressionRef | null`\n  >\n  * NopInfo\n  >\n  * UnreachableInfo\n  >\n  * HostInfo#**op**: `number`\n  * HostInfo#**nameOperand**: `string | null`\n  * HostInfo#**operands**: `ExpressionRef[]`\n  >\n  * AtomicRMWInfo#**op**: `number`\n  * AtomicRMWInfo#**bytes**: `number`\n  * AtomicRMWInfo#**offset**: `number`\n  * AtomicRMWInfo#**ptr**: `ExpressionRef`\n  * AtomicRMWInfo#**value**: `ExpressionRef`\n  >\n  * AtomicCmpxchgInfo#**bytes**: `number`\n  * AtomicCmpxchgInfo#**offset**: `number`\n  * AtomicCmpxchgInfo#**ptr**: `ExpressionRef`\n  * AtomicCmpxchgInfo#**expected**: `ExpressionRef`\n  * AtomicCmpxchgInfo#**replacement**: `ExpressionRef`\n  >\n  * AtomicWaitInfo#**ptr**: `ExpressionRef`\n  * AtomicWaitInfo#**expected**: `ExpressionRef`\n  * AtomicWaitInfo#**timeout**: `ExpressionRef`\n  * AtomicWaitInfo#**expectedType**: `Type`\n  >\n  * AtomicNotifyInfo#**ptr**: `ExpressionRef`\n  * AtomicNotifyInfo#**notifyCount**: `ExpressionRef`\n  >\n  * AtomicFenceInfo\n  >\n  * SIMDExtractInfo#**op**: `Op`\n  * SIMDExtractInfo#**vec**: `ExpressionRef`\n  * SIMDExtractInfo#**index**: `ExpressionRef`\n  >\n  * SIMDReplaceInfo#**op**: `Op`\n  * SIMDReplaceInfo#**vec**: `ExpressionRef`\n  * SIMDReplaceInfo#**index**: `ExpressionRef`\n  * SIMDReplaceInfo#**value**: `ExpressionRef`\n  >\n  * SIMDShuffleInfo#**left**: `ExpressionRef`\n  * SIMDShuffleInfo#**right**: `ExpressionRef`\n  * SIMDShuffleInfo#**mask**: `Uint8Array`\n  > \n  * SIMDTernaryInfo#**op**: `Op`\n  * SIMDTernaryInfo#**a**: `ExpressionRef`\n  * SIMDTernaryInfo#**b**: `ExpressionRef`\n  * SIMDTernaryInfo#**c**: `ExpressionRef`\n  >\n  * SIMDShiftInfo#**op**: `Op`\n  * SIMDShiftInfo#**vec**: `ExpressionRef`\n  * SIMDShiftInfo#**shift**: `ExpressionRef`\n  >\n  * SIMDLoadInfo#**op**: `Op`\n  * SIMDLoadInfo#**offset**: `number`\n  * SIMDLoadInfo#**align**: `number`\n  * SIMDLoadInfo#**ptr**: `ExpressionRef`\n  >\n  * MemoryInitInfo#**segment**: `number`\n  * MemoryInitInfo#**dest**: `ExpressionRef`\n  * MemoryInitInfo#**offset**: `ExpressionRef`\n  * MemoryInitInfo#**size**: `ExpressionRef`\n  >\n  * MemoryDropInfo#**segment**: `number`\n  >\n  * MemoryCopyInfo#**dest**: `ExpressionRef`\n  * MemoryCopyInfo#**source**: `ExpressionRef`\n  * MemoryCopyInfo#**size**: `ExpressionRef`\n  >\n  * MemoryFillInfo#**dest**: `ExpressionRef`\n  * MemoryFillInfo#**value**: `ExpressionRef`\n  * MemoryFillInfo#**size**: `ExpressionRef`\n  >\n  * TryInfo#**body**: `ExpressionRef`\n  * TryInfo#**catchBody**: `ExpressionRef`\n  >\n  * ThrowInfo#**event**: `string`\n  * ThrowInfo#**operands**: `ExpressionRef[]`\n  >\n  * RethrowInfo#**exnref**: `ExpressionRef`\n  >\n  * BrOnExnInfo#**name**: `string`\n  * BrOnExnInfo#**event**: `string`\n  * BrOnExnInfo#**exnref**: `ExpressionRef`\n  >\n  * PopInfo\n  >\n  * PushInfo#**value**: `ExpressionRef`\n\n* **emitText**(expression: `ExpressionRef`): `string`<br />\n  Emits the expression in Binaryen's s-expression text format (not official stack-style text format).\n\n### Relooper\n\n* new **Relooper**()<br />\n  Constructs a relooper instance. This lets you provide an arbitrary CFG, and the relooper will structure it for WebAssembly.\n\n* Relooper#**addBlock**(code: `ExpressionRef`): `RelooperBlockRef`<br />\n  Adds a new block to the CFG, containing the provided code as its body.\n\n* Relooper#**addBranch**(from: `RelooperBlockRef`, to: `RelooperBlockRef`, condition: `ExpressionRef`, code: `ExpressionRef`): `void`<br />\n  Adds a branch from a block to another block, with a condition (or nothing, if this is the default branch to take from the origin - each block must have one such branch), and optional code to execute on the branch (useful for phis).\n\n* Relooper#**addBlockWithSwitch**(code: `ExpressionRef`, condition: `ExpressionRef`): `RelooperBlockRef`<br />\n  Adds a new block, which ends with a switch/br_table, with provided code and condition (that determines where we go in the switch).\n\n* Relooper#**addBranchForSwitch**(from: `RelooperBlockRef`, to: `RelooperBlockRef`, indexes: `number[]`, code: `ExpressionRef`): `void`<br />\n  Adds a branch from a block ending in a switch, to another block, using an array of indexes that determine where to go, and optional code to execute on the branch.\n\n* Relooper#**renderAndDispose**(entry: `RelooperBlockRef`, labelHelper: `number`, module: `Module`): `ExpressionRef`<br />\n  Renders and cleans up the Relooper instance. Call this after you have created all the blocks and branches, giving it the entry block (where control flow begins), a label helper variable (an index of a local we can use, necessary for irreducible control flow), and the module. This returns an expression - normal WebAssembly code - that you can use normally anywhere.\n\n### Source maps\n\n* Module#**addDebugInfoFileName**(filename: `string`): `number`<br />\n  Adds a debug info file name to the module and returns its index.\n\n* Module#**getDebugInfoFileName**(index: `number`): `string | null` <br />\n  Gets the name of the debug info file at the specified index.\n\n* Module#**setDebugLocation**(func: `FunctionRef`, expr: `ExpressionRef`, fileIndex: `number`, lineNumber: `number`, columnNumber: `number`): `void`<br />\n  Sets the debug location of the specified `ExpressionRef` within the specified `FunctionRef`.\n\n### Debugging\n\n* Module#**setAPITracing**(on: `boolean`): `void`<br />\n  Enables tracing of the C-API in the console. Can be very useful when filing bug reports.\n\n* Module#**interpret**(): `void`<br />\n  Runs the module in the interpreter, calling the start function.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AssemblyScript/binaryen.js.git"
  },
  "scripts": {
    "check": "tsc index.d.ts --noEmit --strict --noImplicitAny --strictNullChecks --listFiles --diagnostics",
    "readme": "doctoc README.md --github --title \"### Contents\"",
    "test": "npm run check && node tests/sanity && node tests/example"
  },
  "typings": "index.d.ts",
  "version": "90.0.0-nightly.20200214"
}
